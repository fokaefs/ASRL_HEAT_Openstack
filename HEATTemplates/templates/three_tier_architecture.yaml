heat_template_version: 2014-10-16
description: Simple three-tier web architecture
parameters:
  image:
    type: string
    description: Image used for VMs
  key:
    type: string
    description: SSH key to connect to VMs
  web_flavor:
    type: string
    description: Size (flavor) of web servers
  db_flavor:
    type: string
    description: Size (flavor) of database servers
  network:
    type: string
    description: Network used by the servers
  public_network:
    type: string
    description: Public (external) network
  cluster_size:
    type: number
    description: Number of web servers
  min_cluster_size:
    type: number
    description: Minimum number of web servers
  max_cluster_size:
    type: number
    description: Maximum number of web servers
  db_root_password:
    type: string
    description: Password for root access to the DB server
resources:
  db:
    type: OS::Nova::Server
    properties:
      flavor:
        get_param: db_flavor
      image:
        get_param: image
      key_name:
        get_param: key
      config_drive: true
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
            #!/bin/bash -v
            bash -c "DEBIAN_FRONTEND=noninteractive aptitude install -q -y mysql-server"  > /dev/null 2> errors.log
            mysql -uroot -e "UPDATE mysql.user SET Password=PASSWORD('$db_rootpassword') WHERE User='root'; FLUSH PRIVILEGES;" > /dev/null 2> errors.log
            wget -q http://ceras.eso.yorku.ca/etavirp/mysql/mySqlScript.sql > /dev/null 2> errors.log
            mysql -uroot -p$db_rootpassword < mySqlScript.sql > /dev/null 2> errors.log
            rm -rf mySqlScript.sql > /dev/null 2> errors.log
            # download the config file
            wget -q http://ceras.eso.yorku.ca/etavirp/mysql/my.cnf -O my.cnf.bkp
            # generate the new config file with the bind address replaced
            while read LINE
            do
                    LINE=`eval echo $LINE`
                    echo $LINE >> my.cnf
            done < my.cnf.bkp
            # remove the local backup
            rm -f my.cnf.bkp
            # do a backup for the file on the server
            mv /etc/mysql/my.cnf /etc/mysql/my.cnf.bkp
            # copy the configuration file to the right location
            mv -f my.cnf /etc/mysql/my.cnf
                    
            
          params:
            $db_rootpassword:
              get_param: db_root_password
  web_cluster:
    type: OS::Heat::ResourceGroup
    properties:
      count:
        get_param: cluster_size
      resource_def:
        type: OS::Nova::Server
        properties:
        flavor:
          get_param: web_flavor
        image:
          get_param: image
        key_name:
          get_param: key
        config_drive: true
        metadata:
          metering.stack:
            get_param: OS::stack_id
        user_data:
          str_replace:
            template: |
              #!/bin/bash -v
              apt-get update
              apt-get install -y tomcat7
              iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-port 8080
              wget http://ceras.eso.yorku.ca/etavirp/tomcat/DatabaseOperations.war -O /var/lib/tomcat7/webapps/DatabaseOperations.war

              /etc/init.d/tomcat7 restart
              sed -i "/password/c\password=\"root\"" /var/lib/tomcat7/webapps/DatabaseOperations/META-INF/context.xml
              sed -i "/url/c\url=\"jdbc:mysql:\\/\\/$db_host:3306\\/SimpleDatabase\"" /var/lib/tomcat7/webapps/DatabaseOperations/META-INF/context.xml
              wget http://ceras.eso.yorku.ca/etavirp/tomcat/mysql-connector-java-5.1.10-bin.jar -O /var/lib/tomcat7/webapps/DatabaseOperations/WEB-INF/lib/mysql-connector-java-5.1.10-bin.jar
            params:
              $db_host:
                get_attr:
                - db
                - networks
                - get_param: network
                - 0
        user_data_format: RAW
  lb:
    type: OS::Nova::Server
    properties:
      flavor:
        get_param: web_flavor
      image:
        get_param: image
      key_name:
        get_param: key
      metadata:
        servers:
          get_attr:
          - web_cluster
          - attributes
          - networks
          - get_param: network
          - 0
      config_drive: true
      networks:
      - netowrk:
          get_param: network
      user_data: |
        #!/bin/bash -v

        # install dependencies
        sudo apt-get update
        sudo apt-get -y install apache2 python

        cp /etc/apache2/mods-available/proxy.conf /etc/apache2/mods-available/proxy_bkp.conf
        cp /etc/apache2/mods-available/proxy_balancer.conf /etc/apache2/mods-available/proxy_balancer_bkp.conf

        echo "<IfModule mod_proxy.c>
        ProxyRequests Off

        <Proxy *>
          AddDefaultCharset off
          Order deny,allow
          Allow from all
        </Proxy>
        ProxyVia On
        </IfModule>" | tee /etc/apache2/mods-available/proxy.conf


        a2enmod proxy
        a2enmod proxy_balancer
        a2enmod proxy_http
        a2enmod proxy_ajp
        a2enmod proxy_connect

        service apache2 start

        wget https://raw.githubusercontent.com/fokaefs/ASRL_HEAT_Openstack/master/HEATTemplates/templates/update.py -O /etc/apache2/update.py

        # add a cron job to monitor the metadata and update haproxy
        crontab -l >_crontab || true
        echo "* * * * * curl -s http://169.254.169.254/openstack/latest/meta_data.json | python /etc/apache2/update.py | /usr/bin/logger -t apache2_update" >>_crontab
        crontab <_crontab
        rm _crontab
      user_data_format: RAW
  floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: public_network }

  floating_ip_assoc:
    type: OS::Neutron::FloatingIPAssociation
    properties:
      floatingip_id: { get_resource: floating_ip }
      port_id: { get_attr: [lb, port] }
outputs:
  load_balancer_ip:
    description: The public IP address of the load balancer.
    value:
      get_attr:
      - lb
      - networks
      - get_param: public_network
      - 0
  server_ips:
    description: The public IP address of the newly configured Server.
    value:
      get_attr:
      - web_cluster
      - attributes
      - networks
      - get_param: network
      - 0
  topology_id:
    description: The ID of the deployed stack.
    value:
      get_param: 
      - OS::stack_id