heat_template_version: 2014-10-16
description: AutoScaling Hogna Topology
parameters:
  image:
    type: string
    description: Image used for servers
  key:
    type: string
    description: SSH key to connect to the servers
  flavor:
    type: string
    description: flavor used by the web servers
  database_flavor:
    type: string
    description: flavor used by the db server
  network:
    type: string
    description: Network used by the server
resources:
  database_root_password:
    type: OS::Heat::RandomString
  db:
    type: OS::Nova::Server
    properties:
      flavor:
        get_param: flavor
      image:
        get_param: image
      key_name:
        get_param: key
      config_drive: true
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
            #!/bin/bash -v
            apt-get update
            debconf-set-selections <<< "mysql-server mysql-server/root_password password $db_rootpassword"
            debconf-set-selections <<< "mysql-server mysql-server/root_password_again password $db_rootpassword"
            apt-get install -y mysql-server
            wget https://raw.githubusercontent.com/fokaefs/ASRL_HEAT_Openstack/master/HEATTemplates/templates/mySqlScript.sql
            mysql -uroot -p$db_rootpassword < mySqlScript.sql
            rm -rf mySqlScript.sql
            db_host=$(curl http://169.254.169.254/latest/meta-data/local-ipv4) 
            echo $db_host
            wget http://ceras.eso.yorku.ca/etavirp/mysql/my.cnf -O /etc/mysql/my.cnf
            sed -i "/bind-address/c\bind-address = $db_host" /etc/mysql/my.cnf                    
            service mysql restart
          params:
            $db_rootpassword:
              get_attr:
              - database_root_password
              - value
            #$db_host: {get_attr: [db, networks, get_param: network, 0]}
  asg:
    type: OS::Heat::AutoScalingGroup
    properties:
      min_size: 1
      max_size: 8
      resource:
            type: OS::Nova::Server
            properties:
              flavor:
                 get_param: flavor
              image:
                get_param: image
              key_name:
                get_param: key
              config_drive: true
              metadata:
                metering.stack:
                  get_param: OS::stack_id
              user_data:
                str_replace:
                  template: |
                        #!/bin/bash -v
                        apt-get update
                        apt-get install -y tomcat7
                        iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-port 8080
                        wget http://ceras.eso.yorku.ca/etavirp/tomcat/DatabaseOperations.war -O /var/lib/tomcat7/webapps/DatabaseOperations.war
                        
                        /etc/init.d/tomcat7 restart
                        sed -i "/password/c\password=\"root\"" /var/lib/tomcat7/webapps/DatabaseOperations/META-INF/context.xml
                        sed -i "/url/c\url=\"jdbc:mysql:\\/\\/$db_host:3306\\/SimpleDatabase\"" /var/lib/tomcat7/webapps/DatabaseOperations/META-INF/context.xml
                        wget http://ceras.eso.yorku.ca/etavirp/tomcat/mysql-connector-java-5.1.10-bin.jar -O /var/lib/tomcat7/webapps/DatabaseOperations/WEB-INF/lib/mysql-connector-java-5.1.10-bin.jar
                        
                        echo "* * * * * curl -X POST http://$load_balancer_ip" >>_crontab
                        crontab <_crontab
                        
                  params:
#                    $db_rootpassword:
#                      get_attr:
#                      - database_root_password
#                      - value
                    $load_balancer_ip:
                      get_attr: [lb, networks, get_param: network, 0]
                    $db_host:
                      get_attr: [db, networks, get_param: network, 0]
              user_data_format: RAW
  web_server_scaleup_policy:
    type: OS::Heat::ScalingPolicy
    properties:
      adjustment_type: change_in_capacity
      auto_scaling_group_id:
        get_resource: asg
      cooldown: 60
      scaling_adjustment: 1
  web_server_scaledown_policy:
    type: OS::Heat::ScalingPolicy
    properties:
      adjustment_type: change_in_capacity
      auto_scaling_group_id:
        get_resource: asg
      cooldown: 60
      scaling_adjustment: -1
  cpu_alarm_high:
    type: OS::Ceilometer::Alarm
    properties:
      description: Scale-up if the average CPU > 60% for 1 minute
      meter_name: cpu_util
      statistic: avg
      period: 60
      evaluation_periods: 1
      threshold: 60
      alarm_actions:
      - get_attr:
        - web_server_scaleup_policy
        - alarm_url
      matching_metadata:
        metadata.user_metadata.stack:
          get_param: OS::stack_id
      comparison_operator: gt
  cpu_alarm_low:
    type: OS::Ceilometer::Alarm
    properties:
      description: Scale-down if the average CPU < 10% for 10 minutes
      meter_name: cpu_util
      statistic: avg
      period: 600
      evaluation_periods: 1
      threshold: 10
      alarm_actions:
      - get_attr:
        - web_server_scaledown_policy
        - alarm_url
      matching_metadata:
        metadata.user_metadata.stack:
          get_param: OS::stack_id
      comparison_operator: lt
  lb:
    type: OS::Nova::Server
    properties:
      flavor:
        get_param: flavor
      image:
        get_param: image
      key_name:
        get_param: key
#      metadata:
#        servers:
#          get_attr: [asg, outputs_list, networks, get_param: network, 0]
#      config_drive: true
      networks:
      - network:
          get_param: network
      user_data: |            
                #!/bin/bash -ex
                # install dependencies
                apt-get update
                apt-get -y install build-essential python python-dev python-virtualenv nginx supervisor haproxy

                #configure haproxy
                sed -i 's/ENABLED=0/ENABLED=1/' /etc/default/haproxy

                # save haproxy original configuration
                cp /etc/haproxy/haproxy.cfg /etc/haproxy/haproxy_base.cfg

                # write an initial empty list of worker servers
                cat >>/etc/haproxy/servers.json <<EOF
                []
                EOF

                # create a heart beat user to run the server process
                adduser --disabled-password --gecos "" heartbeat
                
                # install the heartbeat application
                cd /home/heartbeat
                wget https://raw.githubusercontent.com/fokaefs/ASRL_HEAT_Openstack/master/HEATTemplates/templates/heartbeat.py -O heartbeat.py
                wget https://raw.githubusercontent.com/fokaefs/ASRL_HEAT_Openstack/master/HEATTemplates/templates/haproxy_update.py -O haproxy_update.py
                
                # create a virtualenv and install dependencies
                virtualenv venv
                venv/bin/pip install flask gunicorn==18.0
                
                # make the heartbeat user the owner of the application
                chown -R heartbeat:heartbeat heartbeat.py
                
                # configure supervisor to run a private gunicorn web server, and
                # to autostart it on boot and when it crashes
                # stdout and stderr logs from the server will go to /var/log/tiny
                mkdir /var/log/heartbeat
                cat >/etc/supervisor/conf.d/heartbeat.conf <<EOF
                [program:heartbeat]
                command=/home/heartbeat/venv/bin/gunicorn -b 127.0.0.1:8000 -w 4 --chdir /home/heartbeat --log-file - heartbeat:heartbeat
                user=heartbeat
                autostart=true
                autorestart=true
                stderr_logfile=/var/log/heartbeat/stderr.log
                stdout_logfile=/var/log/heartbeat/stdout.log
                EOF
                supervisorctl reread
                supervisorctl update
                
                # configure nginx as the front-end web server with a reverse proxy
                # rule to the gunicorn server
                cat >/etc/nginx/sites-available/heartbeat<<EOF
                server {
                    listen 80;
                    server_name _;
                    access_log /var/log/nginx/tiny.access.log;
                    error_log /var/log/nginx/tiny.error.log;
                    location / {
                         proxy_pass http://127.0.0.1:8000;
                         proxy_redirect off;
                         proxy_set_header Host \$host;
                         proxy_set_header X-Real-IP \$remote_addr;
                         proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                    }
                }
                EOF
                rm -f /etc/nginx/sites-enabled/default
                ln -s /etc/nginx/sites-available/heartbeat /etc/nginx/sites-enabled/
                service nginx restart
      user_data_format: RAW 
outputs:
  load_balancer_ip:
    description: The private IP address of the load balancer.
    value: { get_attr: [lb, networks, get_param: network, 0]}
  server_ips:
    description: The public IP address of the newly configured Server.
    value: { get_attr: [asg, outputs_list, networks, get_param: network, 0] }
  scale_up_url:
    description: |
      This URL is the webhook to scale up the autoscaling group.  You can invoke the scale-up operation by doing an HTTP POST to this URL; no body nor extra headers are needed.
    value:
      get_attr:
      - web_server_scaleup_policy
      - alarm_url
  scale_dn_url:
    description: |
      This URL is the webhook to scale down the autoscaling group. You can invoke the scale-down operation by doing an HTTP POST to this URL; no body nor extra headers are needed.
    value:
      get_attr:
      - web_server_scaledown_policy
      - alarm_url
  website_url:
    value:
      str_replace:
        template: http://host/DatabaseOperations/pi?digits=20&iterations=4000
        params:
          host:
            get_attr:
            - lb
            - networks
            - get_param: network
            - 0
    description: |
      This URL is the "external" URL that can be used to access the Wordpress site.
  ceilometer_query:
    value:
      str_replace:
        template: |
          ceilometer statistics -m cpu_util metadata.user_metadata.stack=stackval -p 600 -a avg
        params:
          stackval:
            get_param: OS::stack_id
    description: |
      This is a Ceilometer query for statistics on the cpu_util meter Samples about OS::Nova::Server instances in this stack.  The parameter selects Samples according to the subject's metadata. When a VM's metadata includes an item of the form metering.X=Y, the corresponding Ceilometer resource has a metadata item of the form user_metadata.X=Y and samples about resources so tagged can be queried with a Ceilometer query term of the form metadata.user_metadata.X=Y.  In this case the nested stacks give their VMs metadata that is passed as a nested stack parameter, and this stack passes a metadata of the form metering.stack=Y, where Y is this stack's ID.